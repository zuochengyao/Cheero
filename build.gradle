buildscript {
    apply from: 'config.gradle'
    addRepositories(repositories)
    dependencies {
        classpath versions.deps.gradle // gradle 插件
        classpath versions.deps.greendao.classpath // greendao 插件
        classpath versions.deps.tinker.classpath // tinker 插件
        classpath versions.deps.kotlin.gradle_plugin // kotlin 插件
        classpath versions.deps.androidx.jetpack.navigation.safe_args // jetpack-safeargs 插件
    }
}

allprojects {
    addRepositories(repositories)
}

subprojects {
    afterEvaluate { currentProject ->
        String projectName = currentProject.getName()
        boolean isApplication = currentProject.plugins.hasPlugin("com.android.application")
        String type = isApplication ? "application" : "library"
        println("${projectName} is $type")

        android {
            compileSdkVersion versions.build.compile_sdk

            defaultConfig {
                minSdkVersion versions.build.min_sdk
                targetSdkVersion versions.build.target_sdk
                versionCode versions.build.code
                versionName versions.build.name
                multiDexEnabled true
                testInstrumentationRunner versions.deps.androidx.test.plugin
                javaCompileOptions {
                    annotationProcessorOptions {
                        arguments = [AROUTER_MODULE_NAME: projectName]
                    }
                }
            }

            buildFeatures {
                dataBinding true
            }

            lintOptions {
                abortOnError false
            }

            compileOptions {
                sourceCompatibility versions.build.java
                targetCompatibility versions.build.java
            }

            kotlinOptions {
                jvmTarget = versions.build.java
            }

            repositories {
                flatDir {
                    dirs 'libs'
                }
            }

            packagingOptions {
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/rxjava.properties'
            }

            if (isApplication) {
                signingConfigs {
                    // 打包签名
                    release {
                        keyAlias versions.sign.release.alias
                        keyPassword versions.sign.release.password
                        storeFile file(versions.sign.release.filepath)
                        storePassword versions.sign.release.store
                    }
                }

                buildTypes {
                    release {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        signingConfig signingConfigs.release
                        applicationVariants.all { variant ->
                            variant.outputs.all { output ->
                                outputFileName = "${projectName}_${defaultConfig.versionName}_${variant.name}.apk"
                            }
                        }
                    }
                    debug {
                        minifyEnabled false
                        signingConfig signingConfigs.release
                    }
                }
            }
        }

        dependencies {
            implementation fileTree(include: ['*.jar'], dir: 'libs')
            implementation fileTree(include: ['*.aar'], dir: 'libs')
            // junit
            testImplementation versions.deps.junit
            androidTestImplementation versions.deps.androidx.test.junit
            androidTestImplementation versions.deps.androidx.test.espresso_core
            // tinker
            annotationProcessor versions.deps.arouter_compiler
            // CheeroSDK module
            if (projectName != "CheeroSDK") {
                implementation project(':CheeroSDK')
            }

        }
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

