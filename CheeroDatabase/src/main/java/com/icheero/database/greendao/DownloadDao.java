package com.icheero.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.icheero.database.entity.Download;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_download".
*/
public class DownloadDao extends AbstractDao<Download, Long> {

    public static final String TABLENAME = "t_download";

    /**
     * Properties of entity Download.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "d_id");
        public final static Property Progress = new Property(1, long.class, "progress", false, "d_position_progress");
        public final static Property Start = new Property(2, long.class, "start", false, "d_position_start");
        public final static Property End = new Property(3, long.class, "end", false, "d_position_end");
        public final static Property DownloadUrl = new Property(4, String.class, "downloadUrl", false, "d_download_url");
        public final static Property ThreadId = new Property(5, int.class, "threadId", false, "d_thread_id");
    }


    public DownloadDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_download\" (" + //
                "\"d_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"d_position_progress\" INTEGER NOT NULL ," + // 1: progress
                "\"d_position_start\" INTEGER NOT NULL ," + // 2: start
                "\"d_position_end\" INTEGER NOT NULL ," + // 3: end
                "\"d_download_url\" TEXT," + // 4: downloadUrl
                "\"d_thread_id\" INTEGER NOT NULL );"); // 5: threadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_download\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Download entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProgress());
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
        stmt.bindLong(6, entity.getThreadId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Download entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProgress());
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
        stmt.bindLong(6, entity.getThreadId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Download readEntity(Cursor cursor, int offset) {
        Download entity = new Download( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // progress
            cursor.getLong(offset + 2), // start
            cursor.getLong(offset + 3), // end
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadUrl
            cursor.getInt(offset + 5) // threadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Download entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProgress(cursor.getLong(offset + 1));
        entity.setStart(cursor.getLong(offset + 2));
        entity.setEnd(cursor.getLong(offset + 3));
        entity.setDownloadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThreadId(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Download entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Download entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Download entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
